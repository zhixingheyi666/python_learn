# -- coding: utf-8 --
##temp编写流程
'''
    监控实例生成流程：
        配置生成仪表实例
        配置监控参数生成监控实例（monitor）
        将监控实例配置加入监控队列管理线程

    1.编写class 516P
    2.编写AI协议
    3.编写class monitor
    4.编写monitor queue manager function
    5.编写界面
'''
                                ##def monitor quque manager func：组织管理多块仪表或者monitor实例的监控队列
'''
                                        功能设想：
                                            常规顺序队列
                                            某类，某些仪表的高优先级
                                            固定时间间隔队列
                                            自定义函数队列
                                            监控周期统计
                                            多协议组态
                                                方便多种协议在一个网络时，协议的切换
                                                把用相同协议的仪表组织在一起
                                                放在相同的队列，比如AI协议的10台温控表
                                                Modbus协议的3台真空表。方便协议的切换。
                                                比如AI协议的设备轮询完之后，重置端口参数
                                                开启Modbus协议，轮询相应的设备。
                                        实现方法：
                                            调用相关仪表实例的监控（或读）方法
                                        生产设备级别的抽象：
                                            很多传感器（monitor实例），他们属于同一设备或者生产线。
                                            我们可以在程序中把多个monitor聚合，抽象出一个生产线或者设备
                                '''
                                ##class 宇电516p仪：每一块仪表就是他的一个实例。
'''
                                        父类，或更高层次的抽象：
                                             class 仪表---->串口通信仪表---->温控仪
                                             class monitor：数据流的监控方法
                                        read():
                                             读取仪表参数的方法
                                                然后把参数存储到实例的对应属性中
                                             与monitor的区别，monitor将调用本方法获取数据
                                                并建立队列或者文件，记录存储大量
                                                或者长时间的数据，同时monitor应当
                                                具有根据设定的条件或者计算函数
                                                分析异常并报警的功能
                                        write():
                                             写入仪表参数的方法
                                        write():
                                            监控:定期发送数据请求，处理返回数据
                                    '''
                                ##class monitor：接受一个可以产生（时间---数据）流的对象，根据定义分析数据流
'''                                        
                                        问题：
                                            不同的对象（仪表实例）拥有不同的设定参数，
                                            怎样传递这些参数呢？还是在仪表实例里面已经设定完毕，
                                            这里只需要调用仪表实例的读参数请求（read()）方法呢？
                                            不行，监控同一仪表的不同数据，还是要给定read方法的参数的
                                                解：
                                                    在GUI界面生成创建监控的流程，用户选择不同的仪表以及选定
                                                    仪表的监控项目，对应生成不同的参数，这些参数就是
                                                    一个monitor实例的所有参数。
                                        设想：
                                            时间数据流：
                                                    比如真空度表实时采集的真空度，就是（时间---数据）流
                                            将调用read方法获取数据
                                                    并建立队列或者文件，记录存储大量
                                                    或者长时间的数据，同时monitor应当
                                                    具有根据设定的条件或者计算函数
                                                    分析异常并报警的功能
                                            根据上面功能要求monitor应该分为几个层次？
                                                    一方面：
                                                        monitor内部应当根据不同的监控要求
                                                        有着众多对数据流的处理方法，最简单的
                                                        就是设定一个限额，还有求斜率，就是变化率
                                                        的函数等等
                                                        由此看来这些应该是独立于仪表之外的通用方法
                                                    二方面：
                                                        monitor应当接受数据流，和必要的对于这个数据流的
                                                        说明信息，如来自于哪块仪表，是仪表的什么参数等
                                                    三方面：
                                                        monitor
                                        采集周期：
                                            两种模式
                                                一种是得到上次响应后，立即发送下一个请求。
                                                一种是设定周期，每个周期只发送一个数据请求。
                                    '''
                                ##通信协议的理解：
'''
                                    硬件层：
                                            比如RS485的COM,baudrate,bytesize等的配置
                                            比如主从通讯模式
                                    用户协议层：
                                            比如具体到宇电仪表的AI协议
                                            涉及读写指令的地址、参数等的组帧格式，
                                            校验的计算方法等
                                    协议的抽象：
                                            考虑把AI协议抽象成一个class，
                                                宇电温控仪表创建时，继承AI协议这个class
                                            协议应该有一个串口属性，协议设计成一个类，
                                                可以被遵序这种协议的仪表继承。生成仪表实例
                                                的时候，期中一个参数就是一个串口实例，或者说serial实例
                                                形象的说就是给这个仪表绑定一个port。多个相同仪表
                                                可以绑定同一port，但是某一时刻仅有一个仪表完全占用这个
                                                port，也就是这个port被分时使用。不同的协议
                                                对串口（也即port）的设定略有不同，所以协议不同的仪表
                                                绑定不同的port。由于目前是多个仪表实际共用一个物理
                                                端口，所以上面虚拟的port也是分时利用真正的物理端口。
                                '''
                                ##class  AI协议
'''
                                    功能：
                                        1.给定参数，生成读或者写的字节串（帧）
                                        2.解析COM端口接收到的从机返回的数据,并存储于相应的变量中等待调用
                                        3.通信异常的处理，产生警报并记录到通信log文档
                                        4.协议应该有一个串口属性，协议设计成一个类，
                                            可以被遵序这种协议的仪表继承。同时生成仪表实例
                                            的时候，期中一个参数就是一个串口，或者说serial实例
                                            形象的说就是给这个仪表绑定一个port。
                                '''
class yd516p( object ):
    def __init__():
        ##仪表该有那些变量、参数呢？
        ##仪表该不该继承serial,和一个通信协议的父类呢？
        ##通信协议该不该成为一个类呢？
        ##什么情况下需要创建一个类？
        ##继承类得到了什么？
