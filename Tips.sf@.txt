当前学习思路：
1、拿出时间泡github，进行各种尝试的探索和搜索代码，一年之中，看能吃出点什么。
	论坛即生命：远离论坛，你终将死去。
2、以“项目建设为中心”！根据技能树和当下需要，每段时间选择一个项目实现之。
	根据经验：项目可以分为许多小的分目标，逐个学习并实现分目标，最终完整实现整个项目。
		 突破项目中新知识点即是学习运用新知识的过程。
	温故知新：项目间隙，看以前的旧项目，和做旧项目时的相关网页和文档
		 可以极大巩固所学，学习做到了目标精准，有的放矢，同时刺激新思维。
3、不同阶段找到相应难度的“教程”，坚持每天学一点。
	系统的学习：没有系统学习，你注定是柔弱的。教材阅读可以作为闲暇的穿插。
4、其实没什么比所学模块和软件的文档更好的资料了，记得一个大神就是通读微软的API和系统文档来着。
	熟读文档：没有比这更好的方法，没有比这更好的资料。
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》
<<<以后下面的思路按时间倒序处理，后入的在顶层>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
17-03-11
・程序：浏览器收藏写入数据库，实现全文检索。高级，实现快照。
	think：快照看能不能借助百度先间接实现
	用正文获取算法将每个网页的正文提取
	    避免钻牛角，实现部分网站即可，慢慢优化
	提取的正文以及网页的相关信息写入数据库，实现全文搜索，权重，索引
	    网页信息：收藏夹标题，收藏所属分类、标签，
		搜索关键词（使用何种关键词检索到的本网页）
	    索引：分别建立 中文索引 和 英文索引？
	    权重：自己根据网页的价值可以设定权重参数。
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
conn = pyodbc.connect( r'driver={SQL Server}; server=localhost; database=easybook; user = saa; password = sa' )
conn = pyodbc.connect(r'driver={SQL Server};server=localhost;database=easybook;uid=sa;pwd=sa')

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>...
01-17
	・打通Mysql到Microsql 的数据通路，主要通过python编程实现。
	・复习廖雪峰python3的教程，浏览即可。

	mysql-connector-python
	Mysql官方提供的连接器网址：http://dev.mysql.com/downloads/connector/python/
	python3不再支持mysqldb 请用pymysql和mysql.connector
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
01-18
	・文件组		将表存储在指定文件组中/PRIMARY主文件组
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-01
	・自己实现一个像Mysql那样的可以执行单句交互的IDE
	・抓紧练习爬虫技巧  从简单的网站开始
	・可以“定制python的交互式命令行”，history输出到文件，标准输出，也定向到文件即可
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-02
	・python交互式命令行设想01：
			其实就是重定向终端的输出就好了，that's simple！
			加壳：开一个python,调用一个终端子进程，重定向其输入和输出
			不加壳：直接shell开python交互，同时直接重定向shell的输入和输出
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-04
	・补充管道和重定向的知识
		如何向stdin.PIPE写入数据
		试试把stdout指向文件
	・如果subprocess 用 python -i 的交互模式，stdout默认输出到shell交互界面，
		即使指向文件，也无效
	・subprocess，communicate 和 stdin的用途和区别，搞清楚就可以了
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-05
	・列表生成式，for for ，for if
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-14
	・module and package ，relative import, explicit and absolute import
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-19
	・自己建立一个代码库，将写过的代码存储到数据库中
	列：    文件名-路径列（区分不同的文件），
		文件hash值（区分同一文件不同版本）， 
		文件内容，或者叫文件行（把每个文件拆分，按行存储，高级：设定一定数目的旧行保存值，暂时存储近期删除的行），
		文件行的状态，对于最后一次更新是存在还是删除？
		更新时间列（预留，或许版本控制和回滚）：
			应该包括三个时间：一个是文件创建时间（仅作为参考）
				二个是文件写入数据库时间
				三个是文件行插入或者删除时间
		引用率（或称为重要因子）：按行标记
	数据库定时扫描指定文件夹，将指定文件更新到数据库内
	建立一个查询接口，方便随时查询写过的代码，高级：自动匹配
	查询结果应当返回关键词出现的列，以及前后的上下文，用设定的按键可以在多个结果间翻看
	・自己建立一个全文索引的书签库。
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-25
・@@一定不要搞太复杂了，先定框架，后实现
・初步设计拆分表结构：我意识到自己需要拆分这个表为多个关系表
・进行时间戳的实验
・hash值得实验先靠后
・重命名和移动文件的优化靠后
・日志功能（统计信息，异常记录，超出处理范围的文件的记录和报警，报表输出）靠后
code in 关系表设计：
	1、文件要素表：fmate_code
		fid，主键，自增
		namepath，文件路径和名称，用于唯一标识文件
		hashid，文件hash值的id，
			用于区分同一文件的不同版本，也是更新文件的依据之一
		fmtime，文件创建时间
		fctime,文件修改时间
		weighted, 文件的重要性，被引用频率，权重
	2、hash表：hash_code
		hsahid：主键，自增
		hsah值：文件的hash值
		
	3、文件信息表：finfo_code
		fid,主键 自增
		fsummary 文件摘要（或者分为三部分）
			 优先从文件开始的注释中生成，否则摘取文中其他注释生成？。
			 引用模块列表
			 函数名、类或者类似于命名空间摘要
		intime， 文件最初写入数据库时间
		remark， 文件其他备注

	4、文件内容表：fline_code
		lid，主键，自增，行id
		hashid,所属hsah值
		fstatus，文件行是否删除标志
		weighted,行引用权重，默认1
		ntimestamp，本行生成时间戳
		rtimestamp,本行更改时间戳
		flid，在所属文件的行数
・文件是否更新的可能的判定方法：
	1、文件的创建时间和修改时间发生变化
	2、文件的hash值发生变化(不知是否受文件元属性的影响，还是只受文件内容的影响)
・是否有新文件，用os.walk获取目录下所有文件名，看是否有新文件出现
・如何解决大量移动、复制和重命名问题。主要是移动，这个可能性大一点。方案如下：
 搜索新文件算法：（见相应的稿纸的手机图片）
  先搜索路径中的新文件，计算hash，对比数据库中的hash：
    如果不存在一样的：
      按建立全新文件处理
    如果存在一样的：
	则看数据库中这个hash对应的文件是否存在：
	  如果不存在：
	    则按重命名或者移动来处理
	  如果存在：
	    则按照复制处理
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
02-26
@@对于win7系统，文件时间：
复制会改变mtime，移动和重命名不会改变mtime
也就是创建时间，不会改变ctime
而编辑文件内容会改变ctime，
也就是所谓修改时间（其实可以理解为当前文件内容的最后修改时间）




		
		

			
